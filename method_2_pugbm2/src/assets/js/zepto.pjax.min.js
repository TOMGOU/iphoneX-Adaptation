(function($) {
	$.noop = function() {};
	$.fn.pjax = function(container, options) {
		return this.on('click.pjax', function(event) {
			handleClick(event, container, options);
		});
	};

	function handleClick(event, container, options) {
		options = optionsFor(container, options);
		var link = event.currentTarget;
		if (link.tagName.toUpperCase() !== 'A') {
			throw '$.fn.pjax or $.pjax.click requires an anchor element';
		}
		if (event.which > 1 || event.metaKey || event.ctrlKey) {
			return;
		}
		if (location.protocol !== link.protocol || location.host !== link.host) {
			return;
		}
		if (link.hash && link.href.replace(link.hash, '') === location.href.replace(location.hash, '')) {
			return;
		}
		if (link.href === location.href + '#') {
			return;
		}
		var defaults = {
			url: link.href,
			container: $(link).attr('data-pjax'),
			target: link,
			clickedElement: $(link),
			fragment: null
		};
		$.pjax($.extend({}, defaults, options));
		event.preventDefault();
	}
	var pjax = $.pjax = function(options) {
		options = $.extend({}, $.ajaxSettings, pjax.defaults, options);
		if ($.isFunction(options.url)) {
			options.url = options.url();
		}
		console.log('%c[pjax.min.js]:', 'background:red;color:#fff', options.url);
		var target = options.target;
		if (!target && options.clickedElement) {
			target = options.clickedElement[0];
		}
		var hash = parseURL(options.url).hash;
		var oldBeforeSend = options.beforeSend,
			oldComplete = options.complete,
			oldSuccess = options.success,
			oldError = options.error;
		var context = options.context = findContainerFor(options.container);
		if (!options.data) {
			options.data = {};
		}
		options.data._pjax = context.selector;

		function fire(type, args) {
			var event = $.Event(type, {
				relatedTarget: target
			});
			context.trigger(event, args);
			if (event.isDefaultPrevented) {
				return !event.isDefaultPrevented();
			}
			return !event.defaultPrevented;
		}
		var timeoutTimer;
		options.beforeSend = function(xhr, settings) {
			if (settings.timeout > 0) {
				timeoutTimer = setTimeout(function() {
					if (fire('pjax:timeout', [xhr, options])) {
						xhr.abort('timeout');
					}
				}, settings.timeout);
				settings.timeout = 0;
			}
			xhr.setRequestHeader('X-PJAX', 'true');
			xhr.setRequestHeader('X-PJAX-Container', context.selector);
			var result;
			if (oldBeforeSend) {
				result = oldBeforeSend.apply(this, arguments);
				if (result === false) {
					return false;
				}
			}
			if (!fire('pjax:beforeSend', [xhr, settings])) {
				return false;
			}
			options.requestUrl = parseURL(settings.url).href;
		};
		options.complete = function(xhr, textStatus) {
			if (timeoutTimer) {
				clearTimeout(timeoutTimer);
			}
			if (oldComplete) {
				oldComplete.apply(this, arguments);
			}
			fire('pjax:complete', [xhr, textStatus, options]);
			fire('pjax:end', [xhr, options]);
			fire('end.pjax', [xhr, options]);
		};
		options.error = function(xhr, textStatus, errorThrown) {
			var container = extractContainer('', xhr, options);
			if (oldError) {
				oldError.apply(this, arguments);
			}
			var allowed = fire('pjax:error', [xhr, textStatus, errorThrown, options]);
			if (textStatus !== 'abort' && allowed) {
				window.location = container.url;
			}
		};
		options.success = function(data, status, xhr) {
			var container = extractContainer(data, xhr, options);
			if (!container.contents) {
				window.location = container.url;
				return;
			}
			pjax.state = {
				id: options.id || uniqueId(),
				url: container.url,
				title: container.title,
				container: context.selector,
				fragment: options.fragment,
				timeout: options.timeout
			};
			if (options.push || options.replace) {
				window.history.replaceState(pjax.state, container.title, container.url);
			}
			if (container.title) {
				document.title = container.title;
			}
			context.html(container.contents);
			if (typeof options.scrollTo === 'number' && $.scrollTop) {
				$(window).scrollTop(options.scrollTo);
			}
			if ((options.replace || options.push) && window._gaq) {
				_gaq.push(['_trackPageview']);
			}
			if (hash !== '') {
				var url = parseURL(container.url);
				url.hash = hash;
				pjax.state.url = url.href;
				window.history.replaceState(pjax.state, container.title, url.href);
				var target = $(url.hash);
				if (target.length) {
					$(window).scrollTop(target.offset().top);
				}
			}
			if (oldSuccess) {
				oldSuccess.apply(this, arguments);
			}
			fire('pjax:success', [data, status, xhr, options]);
		};
		if (!pjax.state) {
			pjax.state = {
				id: uniqueId(),
				url: window.location.href,
				title: document.title,
				container: context.selector,
				fragment: options.fragment,
				timeout: options.timeout
			};
			window.history.replaceState(pjax.state, document.title);
		}
		var xhr = pjax.xhr;
		if (xhr && xhr.readyState < 4) {
			xhr.onreadystatechange = $.noop;
			xhr.abort();
		}
		pjax.options = options;
		var xhr = pjax.xhr = $.ajax(options);
		if (xhr.readyState > 0) {
			$(document).trigger('pjax', [xhr, options]);
			if (options.push && !options.replace) {
				cachePush(pjax.state.id, context.html());
				window.history.pushState(null, '', options.url);
			}
			fire('pjax:start', [xhr, options]);
			fire('start.pjax', [xhr, options]);
			fire('pjax:send', [xhr, options]);
		}
		return pjax.xhr;
	};

	function uniqueId() {
		return (new Date()).getTime();
	}
	function stripPjaxParam(url) {
		return url.replace(/\?_pjax=[^&]+&?/, '?').replace(/_pjax=[^&]+&?/, '').replace(/[\?&]$/, '');
	}
	function parseURL(url) {
		var a = document.createElement('a');
		a.href = url;
		return a;
	}
	function optionsFor(container, options) {
		if (container && options) {
			options.container = container;
		} else {
			if ($.isPlainObject(container)) {
				options = container;
			} else {
				options = {
					container: container
				};
			}
		}
		if (options.container) {
			options.container = findContainerFor(options.container);
		}
		return options;
	}
	function findContainerFor(container) {
		container = $(container);
		if (!container.length) {
			throw 'no pjax container for ' + container.selector;
		} else {
			if (container.selector !== '' && container.context === document) {
				return container;
			} else {
				if (container.attr('id')) {
					return $('#' + container.attr('id'));
				} else {
					throw 'cant get selector for pjax container!';
				}
			}
		}
	}
	function findAll(elems, selector) {
		var results = $();
		elems.each(function() {
			if ($(this).is(selector)) {
				results = results.add(this);
			}
			results = results.add(selector, this);
		});
		return results;
	}
	function extractContainer(data, xhr, options) {
		var obj = {};
		obj.url = stripPjaxParam(xhr.getResponseHeader('X-PJAX-URL') || options.requestUrl);
		var $data = $(data);
		if ($data.length === 0) {
			return obj;
		}
		obj.title = findAll($data, 'title').last().text();
		if (options.fragment) {
			var $fragment = findAll($data, options.fragment).first();
			if ($fragment.length) {
				obj.contents = $fragment.contents();
				if (!obj.title) {
					obj.title = $fragment.attr('title') || $fragment.data('title');
				}
			}
		} else {
			if (!/<html/i.test(data)) {
				obj.contents = $data;
			}
		}
		if (obj.contents) {
			obj.contents = obj.contents.not('title');
			obj.contents.find('title').remove();
		}
		if (obj.title) {
			obj.title = obj.title.trim();
		}
		return obj;
	}
	pjax.reload = function(container, options) {
		var defaults = {
			url: window.location.href,
			push: false,
			replace: true,
			scrollTo: false
		};
		return $.pjax($.extend(defaults, optionsFor(container, options)));
	};
	pjax.defaults = {
		timeout: 650,
		push: true,
		replace: false,
		type: 'GET',
		dataType: 'html',
		scrollTo: 0,
		maxCacheLength: 20
	};
	var cacheMapping = {};
	var cacheForwardStack = [];
	var cacheBackStack = [];

	function cachePush(id, value) {
		cacheMapping[id] = value;
		cacheBackStack.push(id);
		while (cacheForwardStack.length) {
			delete cacheMapping[cacheForwardStack.shift()];
		}
		while (cacheBackStack.length > pjax.defaults.maxCacheLength) {
			delete cacheMapping[cacheBackStack.shift()];
		}
	}
	function cachePop(direction, id, value) {
		var pushStack, popStack;
		cacheMapping[id] = value;
		if (direction === 'forward') {
			pushStack = cacheBackStack;
			popStack = cacheForwardStack;
		} else {
			pushStack = cacheForwardStack;
			popStack = cacheBackStack;
		}
		pushStack.push(id);
		if (id = popStack.pop()) {
			delete cacheMapping[id];
		}
	}
	pjax.click = handleClick;
	$(window).bind('popstate', function(event) {
		var state = event.state;
		if (state && state.container) {
			window.location = location.href;
			var container = $(state.container);
			console.log('%c[pjax.min.js]:', 'background:red;color:#fff', container);
			// if (container.length) {
			//     var options = {
			//         id: state.id,
			//         url: location.href,
			//         container: container,
			//         push: false,
			//         fragment: state.fragment,
			//         timeout: state.timeout,
			//         scrollTo: false
			//     };
			//     $.pjax(options);
			//     // container.trigger("pjax:end", [null, options]);
			//     // container.trigger("end.pjax", [null, options])
			//     container[0].offsetHeight
			// } else {
			//     window.location = location.href
			// }
		}
	});
	$.support = {};
	$.support.pjax = window.history && window.history.pushState && window.history.replaceState;
	if (!$.support.pjax) {
		$.pjax = function(options) {
			var url = $.isFunction(options.url) ? options.url() : options.url,
				method = options.type ? options.type.toUpperCase() : 'GET';
			var form = $('<form>', {
				method: method === 'GET' ? 'GET' : 'POST',
				action: url,
				style: 'display:none'
			});
			if (method !== 'GET' && method !== 'POST') {
				form.append($('<input>', {
					type: 'hidden',
					name: '_method',
					value: method.toLowerCase()
				}));
			}
			var data = options.data;
			if (typeof data === 'string') {
				$.each(data.split('&'), function(index, value) {
					var pair = value.split('=');
					form.append($('<input>', {
						type: 'hidden',
						name: pair[0],
						value: pair[1]
					}));
				});
			} else {
				if (typeof data === 'object') {
					for (key in data) {
						form.append($('<input>', {
							type: 'hidden',
							name: key,
							value: data[key]
						}));
					}
				}
			}
			$(document.body).append(form);
			form.submit();
		};
		$.pjax.click = $.noop;
		$.pjax.reload = window.location.reload;
		$.fn.pjax = function() {
			return this;
		};
	}
})(Zepto || jQuery);
